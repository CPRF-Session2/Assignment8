1) fprintf() and printf() are similar in that they are both output functions for whatever input they are set to receive. Whether it is words, the values of a variable, or another "printable" thing conjured up by the minds of modern programmers, fprintf() and printf() will take what is put between two double quotes (" ") and print it so that it shows up somehow on your computer's display (one way or another). However, while printf() is limited to printing only to the screen/terminal, fprintf() can print to files, making it useful in cases such as handling user-input so that it could be entered into a text file. In other words, fprintf() writes formatted text to the output stream the programmer specifies while printf() writes formatted text to whatever the standard output stream is pointing to.
2) "rw" mode means that an existing file is read and then written upon, "wr" means that a new file would be created (if it didn't exist already), which  is written upon and then read."a" mode allows the user to edit the original contents of an existing (or if the file didn't exist, it would create one) file, while "w" would just create a new file which one could write upon. For example, one could use "a" when they forgot to add something to an existing file, and would simply like to tack on the new data without having to start over and rewrite the entire file. "rw" would be useful if you wanted to, for example, calculate the average of a set of numbers and then individually square each number. If one wanted to square the numbers and then take the average of the new set of numbers, then "wr" would be more appropriate. "w" is simple and straightforward to use when you simply want to start out fresh and create a file, and fill it with whatever contents you need for your agenda.
3) Using the function "gets()" should be avoided because of the possibility of overflowing the buffer. For example, if one sets an array to a pointer and has "gets()" set up to store user-input to the pointer, then the function would not know when to stop. Since the pointer does not tell the function the length of the array, if the user manages to exceed the number of allocated bytes, rather than truncate the input, the function "gets()" would simply continue writing past the end of the array and into memory that it doesn't own.
4) "*fp" points to the address of the file "trial". Considering how pointers are known for being a redirection function and how fopen gives the programmer access to the file in which it is opening, it can be inferred that pointer fp simply uses the file's address to redirect code that uses the pointer to the file's location.
